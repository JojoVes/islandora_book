<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

use Drupal\Core\Form\FormStateInterface;

function islandora_book_menu() {
return array(
    'islandora/object/%islandora_object/manage/book' => array(
      'title' => 'Book',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_paged_content_manage_pages_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_paged_content_manage_pages_access_callback',
      'access arguments' => array(2, array('islandora:bookCModel')),
      'file path' => drupal_get_path('module', 'islandora_paged_content'),
      'file' => 'includes/manage_pages.inc',
    ),
    'islandora/object/%islandora_object/manage/book/ingest' => array(
      'title' => 'Add Page',
      'page callback' => 'islandora_book_ingest_page',
      'page arguments' => array(2),
      'type' => MENU_LOCAL_ACTION,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(ISLANDORA_INGEST, 2),
      'file' => 'includes/manage_book.inc',
    ),
    'islandora/object/%islandora_object/manage/book/ingest_zipped' => array(
      'title' => 'Add Zipped Pages',
      'page callback' => 'islandora_paged_content_ingest_zipped_pages',
      'page arguments' => array(2,
        array('tif', 'tiff', 'jpg', 'jpeg', 'jp2'),
        'islandora:pageCModel',
        \Drupal::config('islandora_book.settings')->get('islandora_book_ingest_derivatives'),
      ),
      'type' => MENU_LOCAL_ACTION,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(ISLANDORA_INGEST, 2),
      'file path' => drupal_get_path('module', 'islandora_paged_content'),
      'file' => 'includes/manage_pages.inc',
    ),
    'islandora/object/%islandora_object/manage/book_page' => array(
      'title' => 'Page',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'islandora_paged_content_manage_page_menu',
      'page arguments' => array(2),
      'access callback' => 'islandora_paged_content_manage_page_access_callback',
      'access arguments' => array(2, array('islandora:pageCModel')),
      'file path' => drupal_get_path('module', 'islandora_paged_content'),
      'file' => 'includes/manage_page.inc',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_book_theme() {
  return [
    'islandora_book_book' => [
      'variables' => ['object' => NULL],
      'file' => 'theme/theme.inc',
    ],
    'islandora_book_page' => [
      'variables' => ['object' => NULL],
      'file' => 'theme/theme.inc',
    ],
    'islandora_book_page_img_print' => [
      'variables' => ['islandora_content' => NULL],
    ],
  ];
}

/**
 * Implements hook_xml_form_builder_form_associations().
 */
function islandora_book_xml_form_builder_form_associations() {
  return [
    'islandora_book_mods_form' => [
      'content_model' => 'islandora:bookCModel',
      'form_name' => 'Islandora Book MODS Form',
      'dsid' => 'MODS',
      'title_field' => ['titleInfo', 'title'],
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ],
  ];
}

/**
 * Implements hook_xml_form_builder_forms().
 */
function islandora_book_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_book');
  return ['Islandora Book MODS Form' => ['form_file' => "$module_path/data/forms/book_form_mods.xml"]];
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_book_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_book');
  $datastreams_path = "$module_path/data/datastreams";
  // Page Content Model.
  $page_content_model = $connection->repository->constructObject('islandora:pageCModel');
  $page_content_model->owner = 'fedoraAdmin';
  $page_content_model->label = 'Islandora Page Content Model';
  $page_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $page_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $paged_content_path = drupal_get_path('module', 'islandora_paged_content');
  $datastream->setContentFromFile("$paged_content_path/xml/islandora_pageCModel_ds_composite_model.xml", FALSE);
  $page_content_model->ingestDatastream($datastream);
  // Book Content Model.
  $book_content_model = $connection->repository->constructObject('islandora:bookCModel');
  $book_content_model->owner = 'fedoraAdmin';
  $book_content_model->label = 'Islandora Internet Archive Book Content Model';
  $book_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $book_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastreams_path/islandora_bookCModel_ds_composite_model.xml", FALSE);
  $book_content_model->ingestDatastream($datastream);
  // Book Collection.
  $book_collection = $connection->repository->constructObject('islandora:bookCollection');
  $book_collection->owner = 'fedoraAdmin';
  $book_collection->label = 'Book Collection';
  $book_collection->models = 'islandora:collectionCModel';
  $book_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $book_collection->constructDatastream('COLLECTION_POLICY', 'M');
  $datastream->label = 'COLLECTION_POLICY';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastreams_path/islandora_book_collection_policy.xml", FALSE);
  $book_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $book_collection->constructDatastream('TN', 'M');
  $datastream->label = 'TN';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $book_collection->ingestDatastream($datastream);
  return [
    'islandora_book' => [
      'title' => 'Islandora book',
      'objects' => [
        $page_content_model,
        $book_content_model,
        $book_collection,
      ],
    ],
  ];
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_book_islandora_bookcmodel_islandora_view_object($object) {
  return [
    'islandora_book' => [
      '#theme' => 'islandora_book_book',
      '#object' => $object,
    ],
  ];
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_book_islandora_pagecmodel_islandora_view_object($object, $page_number, $page_size) {
  return [
    'islandora_book' => [
      '#theme' => 'islandora_book_page',
      '#object' => $object,
    ],
  ];
}

/**
 * Implements hook_CMODEL_PID_islandora_solr_object_result_alter().
 *
 * Add page viewing fragment and search term to show all search results within
 * book on page load.
 */
function islandora_book_islandora_bookcmodel_islandora_solr_object_result_alter(&$search_results, $query_processor) {
  $view_types = [
    "1" => "1up",
    "2" => "2up",
    "3" => "thumb",
  ];
  $field_search = FALSE;
  $fields = preg_split('/OR|AND|NOT/', $query_processor->solrQuery);
  foreach ($fields as $field) {
    if (preg_match('/^(.*):\(.*\)/', $field)) {
      $field_search = TRUE;
      break;
    }
  }

  if ($query_processor->solrQuery != " " && $query_processor->solrQuery && !$field_search) {
// @FIXME
// This looks like another module's variable. You'll need to rewrite this call
// to ensure that it uses the correct configuration object.
// $ia_view = variable_get('islandora_internet_archive_bookreader_default_page_view', "1");

    if ($query_processor->solrQuery != '*:*') {
      $search_results['object_url_fragment'] = "page/1/mode/{$view_types[$ia_view]}/search/";
      $search_results['object_url_fragment'] .= rawurlencode($query_processor->solrQuery);
    }
  }
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_book_islandora_pagecmodel_islandora_ingest_steps(FormStateInterface $form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  if (empty($shared_storage['book'])) {
    return;
  }
  return [
    'islandora_book_upload_pages' => [
      'weight' => 10,
      'type' => 'form',
      'form_class' => 'Drupal\islandora_paged_content\Form\UploadPage',
      'args' => [$shared_storage['book']],
    ],
  ];
}

/**
 * Implements hook_CMODEL_PID_islandora_ingest_steps().
 */
function islandora_book_islandora_bookcmodel_islandora_ingest_steps(FormStateInterface $form_state) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  if (islandora_paged_content_can_extract_from_pdf()) {
    return [
      'islandora_book_upload_pdf' => [
        'weight' => 10,
        'type' => 'form',
        'form_class' => 'Drupal\islandora_paged_content\Form\UploadPdf',
        'args' => ['islandora:pageCModel'],
      ],
    ];
  }
}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_book_islandora_bookcmodel_islandora_derivative() {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  return islandora_paged_content_paged_object_derivatives('islandora_book');
}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_book_islandora_pagecmodel_islandora_derivative() {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  return islandora_paged_content_page_derivatives('islandora_book');
}

/**
 * Implements hook_form_islandora_object_properties_form_alter().
 */
function islandora_book_form_islandora_object_properties_form_alter(array &$form, FormStateInterface $form_state) {
  $object = $form_state->get('object');
  if (in_array('islandora:bookCModel', $object->models)) {
    $form['delete']['#value'] = t('Delete Book');
  }
}

/**
 * Implements hook_form_islandora_delete_object_form_alter().
 */
function islandora_book_form_islandora_delete_object_form_alter(array &$form, FormStateInterface $form_state) {
  $object = $form_state->get('object');
// @FIXME: doesn't kill the submit in d8.
  if (in_array('islandora:bookCModel', $object->models)) {
    $form['description']['#markup'] = t('This will remove the book object and all related page objects. This action cannot be undone.');
    $form['#submit'][] = 'islandora_book_islandora_delete_object_form_delete_pages_submit';
    if (($key = array_search('islandora_delete_object_form_submit', $form['#submit'])) !== FALSE) {
      unset($form['#submit'][$key]);
    }
  }
}

/**
 * Delete all the page objects related to the book object being deleted.
 *
 * @param array $form
 *   The Drupal form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The Drupal form state.
 */
function islandora_book_islandora_delete_object_form_delete_pages_submit(array $form, FormStateInterface $form_state) {
  module_load_include('inc', 'islandora_paged_content', 'includes/batch');
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/utilities');

  $object = $form_state->get('object');
  $get_pid = function ($o) {
    return $o['pid'];
  };
  $pages = array_values(array_map($get_pid, islandora_paged_content_get_pages($object)));
  $batch_delete = islandora_paged_content_delete_pages_batch($object, $pages);
  $batch_delete['operations'][] = ['islandora_paged_content_delete_parent_object_operation', [$object->id]];
  batch_set($batch_delete);
  $parents = islandora_get_parents_from_rels_ext($object);
  $parent = array_pop($parents);
  if ($parent) {
    $form_state->setRedirect('islandora.view_object', ['object' => $object->id]);
  }
  else {
    $form_state->setRedirect('islandora.view_default_object');
  }
}

/**
 * Renders the Pages local menu task.
 *
 * @param AbstractObject $object
 *   The book object to fetch the pages from.
 *
 * @return string
 *   The HTML repersentation of the given books pages.
 */
function islandora_book_pages_menu(AbstractObject $object) {
  module_load_include('inc', 'islandora', 'includes/breadcrumb');
  //drupal_set_breadcrumb(islandora_get_breadcrumbs($object));
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $pages = islandora_paged_content_get_pages($object);
  return [
    '#theme' => 'islandora_objects',
    '#objects' => array_keys($pages),
  ];

}

/**
 * Implements hook_islandora_update_related_objects_properties().
 */
function islandora_book_islandora_bookcmodel_islandora_update_related_objects_properties($object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $get_pid = function ($o) {
    return $o['pid'];
  };
  $pages = array_values(array_map($get_pid, islandora_paged_content_get_pages($object)));
  return $pages;
}

/**
 * Implements hook_islandora_xacml_editor_child_query().
 */
function islandora_book_islandora_bookcmodel_islandora_xacml_editor_child_query(AbstractObject $object) {
  $pages_query = <<<EOQ
SELECT ?object from <#ri> WHERE
{
  ?object <fedora-rels-ext:isMemberOf> <info:fedora/{$object->id}>
}
EOQ;
  return [
    'book_pages' => [
      'type' => 'sparql',
      'query' => $pages_query,
      'description' => t('All pages of this book (existing and new).'),
      'recurse' => TRUE,
    ],
  ];
}

/**
 * Implements hook_islandora_view_print_object().
 */
function islandora_book_islandora_view_print_object($object) {
  if (in_array('islandora:pageCModel', $object->models)) {
    // Theme image separately.
    // @FIXME
// theme() has been renamed to _theme() and should NEVER be called directly.
// Calling _theme() directly can alter the expected output and potentially
// introduce security issues (see https://www.drupal.org/node/2195739). You
// should use renderable arrays instead.
//
//
// @see https://www.drupal.org/node/2195739
// $islandora_content = theme('image', array(
//       'title' => $object->label,
//       'path' => url("islandora/object/{$object->id}/datastream/JPG/view"),
//     ));
    return [
      '#theme' => 'islandora_book_page_img_print',
      '#islandora_content' => $islandora_content,
    ];
  }
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_datastream_ingested().
 */
function islandora_book_islandora_pagecmodel_techmd_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('module', 'islandora_fits');
  $techmd = $datastream->content;
  $xml = new SimpleXMLElement($techmd);
  $xml->registerXPathNamespace('fits', 'http://hul.harvard.edu/ois/xml/ns/fits/fits_output');
  $fits_metadata = islandora_fits_child_xpath($xml);
  $unit = isset($fits_metadata['Jhove']['Sampling Frequency Unit'][0]) ? $fits_metadata['Jhove']['Sampling Frequency Unit'][0] : 'ins.';
  $xcount = isset($fits_metadata['Jhove']['X Sampling Frequency'][0]) ? $fits_metadata['Jhove']['X Sampling Frequency'][0] : '600';
  $ycount = isset($fits_metadata['Jhove']['Y Sampling Frequency'][0]) ? $fits_metadata['Jhove']['Y Sampling Frequency'][0] : '600';
  if ($xcount < 600 || $ycount < 600) {
    $message = t("Ingested image has a sampling frequency of @x by @y per @unit For best results use images of at least 600 by 600 per in.",
        [
          '@x' => $xcount,
          '@y' => $ycount,
          '@unit' => $unit,
        ]);
    drupal_set_message($message, 'warning', FALSE);
  }
}

/**
 * Implements hook_islandora_paged_content_model_registry().
 */
function islandora_book_islandora_paged_content_content_model_registry() {
  return [
    'islandora:bookCModel' => [
      'parents' => [
        'islandora:collectionCModel' => 'isMemberOfCollection',
      ],
      'children' => [
        'islandora:pageCModel' => [],
      ],
    ],
  ];
}
